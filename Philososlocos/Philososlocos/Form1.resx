<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbTable.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>